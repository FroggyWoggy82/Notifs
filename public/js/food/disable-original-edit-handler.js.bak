/**
 * Disable Original Edit Handler
 * Disables the original edit button handler in food.js to prevent conflicts
 */

(function() {
    // Disable console logging for this script
    const DEBUG = false;

    if (DEBUG) console.log('Initializing disable-original-edit-handler.js');

    // Keep track of processed buttons to avoid redundant operations
    const processedButtons = new Set();

    // Function to disable the original edit button handler
    function disableOriginalEditHandler() {
        // Find all edit buttons that haven't been processed yet
        const editButtons = document.querySelectorAll('.edit-ingredient-btn:not([data-original-handler-disabled="true"])');

        if (editButtons.length === 0) return; // No new buttons to process

        // Remove all existing event listeners by cloning the buttons
        editButtons.forEach(button => {
            // Skip if we've already processed this button
            if (processedButtons.has(button)) return;

            if (DEBUG) console.log('Disabling original handler for edit button');

            // Clone the button to remove all event listeners
            const newButton = button.cloneNode(true);
            if (button.parentNode) {
                button.parentNode.replaceChild(newButton, button);
            }

            // Add a data attribute to mark it as processed
            newButton.setAttribute('data-original-handler-disabled', 'true');

            // Add to our processed set
            processedButtons.add(newButton);
        });
    }

    // Run the function initially
    setTimeout(disableOriginalEditHandler, 500);

    // Set up a mutation observer to watch for new buttons
    const observer = new MutationObserver(function(mutations) {
        let hasRelevantChanges = false;

        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length) {
                // Check if any of the added nodes contain edit buttons
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1 && (
                        node.classList?.contains('edit-ingredient-btn') ||
                        node.querySelector?.('.edit-ingredient-btn')
                    )) {
                        hasRelevantChanges = true;
                    }
                });
            }
        });

        if (hasRelevantChanges) {
            setTimeout(disableOriginalEditHandler, 100);
        }
    });

    // Start observing the document body for changes
    observer.observe(document.body, { childList: true, subtree: true });

    // Also handle dynamic button creation through event delegation
    document.body.addEventListener('click', function(event) {
        if (event.target.classList.contains('view-recipe-btn')) {
            // Wait for the recipe details to be displayed
            setTimeout(disableOriginalEditHandler, 300);
        }
    });

    // Run periodically but less frequently
    setInterval(disableOriginalEditHandler, 10000); // Reduced from 2000ms to 10000ms

    if (DEBUG) console.log('disable-original-edit-handler.js initialized');
})();
