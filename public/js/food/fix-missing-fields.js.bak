/**
 * Fix Missing Fields
 * Ensures all fields in the edit ingredient form are displayed properly
 */

document.addEventListener('DOMContentLoaded', function() {
    // First, check if the package-amount-field.css is causing issues
    const packageAmountStyles = document.querySelectorAll('link[href*="package-amount-field.css"]');
    packageAmountStyles.forEach(styleLink => {
        // Create a new style element with higher specificity
        const overrideStyle = document.createElement('style');
        overrideStyle.textContent = `
            /* Override vertical layout styles */
            .form-group-column {
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: nowrap !important;
                gap: 10px !important;
                align-items: flex-end !important;
                margin-bottom: 10px !important;
                width: auto !important;
            }

            /* Override form group styles */
            .form-group-column .form-group {
                width: auto !important;
                margin-bottom: 0 !important;
                display: inline-block !important;
            }

            /* Override input styles */
            .form-group-column .form-group input {
                width: 80px !important;
                padding: 2px 4px !important;
                height: 24px !important;
            }

            /* Make name field wider */
            #edit-ingredient-name {
                width: 140px !important;
            }
        `;
        document.head.appendChild(overrideStyle);
    });
    // Function to fix the edit ingredient form
    function fixMissingFields() {
        // Find all edit ingredient forms
        const editForms = document.querySelectorAll('.edit-ingredient-form');

        editForms.forEach(form => {
            // Skip if already fixed
            if (form.dataset.fieldsFixed === 'true') return;

            // Get the form element
            const formElement = form.querySelector('form');
            if (!formElement) return;

            // Get the form group column
            const formGroupColumn = formElement.querySelector('.form-group-column');
            if (!formGroupColumn) {
                // Don't log an error, just return silently
                // This happens when viewing a recipe (not editing)
                return;
            }

            // Always recreate the form group column to ensure proper structure
            // This is more reliable than checking for missing fields
            console.log('Recreating form group column for consistency');

            // Create a new form group column
            const newFormGroupColumn = document.createElement('div');
            newFormGroupColumn.className = 'form-group-column';
            newFormGroupColumn.style.display = 'flex';
            newFormGroupColumn.style.flexDirection = 'row';
            newFormGroupColumn.style.flexWrap = 'nowrap';
            newFormGroupColumn.style.gap = '10px';
            newFormGroupColumn.style.alignItems = 'flex-end';
            newFormGroupColumn.style.marginBottom = '10px';

            // Create the name field group
            const nameGroup = document.createElement('div');
            nameGroup.className = 'form-group';
            nameGroup.innerHTML = `
                <label for="edit-ingredient-name">Name:</label>
                <input type="text" id="edit-ingredient-name" required style="width: 140px; height: 24px; padding: 2px 4px; font-size: 0.8em; margin-bottom: 0;">
            `;

            // Create the amount field group
            const amountGroup = document.createElement('div');
            amountGroup.className = 'form-group';
            amountGroup.innerHTML = `
                <label for="edit-ingredient-amount">Amount (g):</label>
                <input type="number" id="edit-ingredient-amount" step="0.1" min="0.1" required style="width: 70px; height: 24px; padding: 2px 4px; font-size: 0.8em; margin-bottom: 0;">
            `;

            // Create the package amount field group
            const packageAmountGroup = document.createElement('div');
            packageAmountGroup.className = 'form-group';
            packageAmountGroup.innerHTML = `
                <label for="edit-ingredient-package-amount">Package Amount (g):</label>
                <input type="number" id="edit-ingredient-package-amount" step="0.1" min="0" style="width: 70px; height: 24px; padding: 2px 4px; font-size: 0.8em; margin-bottom: 0;">
            `;

            // Create the price field group
            const priceGroup = document.createElement('div');
            priceGroup.className = 'form-group';
            priceGroup.innerHTML = `
                <label for="edit-ingredient-price">Package Price:</label>
                <input type="number" id="edit-ingredient-price" step="0.01" min="0" required style="width: 70px; height: 24px; padding: 2px 4px; font-size: 0.8em; margin-bottom: 0;">
            `;

            // Add the field groups to the new form group column
            newFormGroupColumn.appendChild(nameGroup);
            newFormGroupColumn.appendChild(amountGroup);
            newFormGroupColumn.appendChild(packageAmountGroup);
            newFormGroupColumn.appendChild(priceGroup);

            // Replace the old form group column with the new one
            if (formGroupColumn.parentNode) {
                formGroupColumn.parentNode.replaceChild(newFormGroupColumn, formGroupColumn);
            }

            // Get the existing fields to preserve values
            const nameField = formGroupColumn.querySelector('#edit-ingredient-name');
            const amountField = formGroupColumn.querySelector('#edit-ingredient-amount');
            const packageAmountField = formGroupColumn.querySelector('#edit-ingredient-package-amount');
            const priceField = formGroupColumn.querySelector('#edit-ingredient-price');

            // Preserve any existing values
            if (nameField) newFormGroupColumn.querySelector('#edit-ingredient-name').value = nameField.value;
            if (amountField) newFormGroupColumn.querySelector('#edit-ingredient-amount').value = amountField.value;
            if (packageAmountField) newFormGroupColumn.querySelector('#edit-ingredient-package-amount').value = packageAmountField.value;
            if (priceField) newFormGroupColumn.querySelector('#edit-ingredient-price').value = priceField.value;

            // Mark as fixed
            form.dataset.fieldsFixed = 'true';
        });
    }

    // Run the fix when the page loads
    setTimeout(fixMissingFields, 100);

    // Set up a mutation observer to watch for new forms
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length) {
                setTimeout(fixMissingFields, 50);
            }
        });
    });

    // Start observing the document body for changes
    observer.observe(document.body, { childList: true, subtree: true });

    // Also handle dynamic form creation through event delegation
    document.body.addEventListener('click', function(event) {
        if (event.target.classList.contains('edit-ingredient-btn')) {
            // Wait for the form to be displayed
            setTimeout(fixMissingFields, 100);
            // Try again after a bit longer to ensure it's applied
            setTimeout(fixMissingFields, 300);
            setTimeout(fixMissingFields, 500);
        }
    });

    // Run periodically to ensure the fields are fixed, but only check if there are edit forms visible
    setInterval(() => {
        // Only run the fix if there are edit forms visible
        const editForms = document.querySelectorAll('.edit-ingredient-form');
        if (editForms.length > 0) {
            fixMissingFields();
        }
    }, 1000);
});
