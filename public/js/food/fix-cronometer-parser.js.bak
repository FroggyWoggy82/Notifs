/**
 * Fix for Cronometer Text Parser
 * 
 * This script fixes the SyntaxError in cronometer-text-parser.js
 * by ensuring the PATTERNS variable is not redeclared.
 */

(function() {
    console.log('[Cronometer Parser Fix] Initializing...');

    // Wait for the DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Check if the original processCronometerText function exists
        if (typeof window.processCronometerText !== 'function') {
            console.error('[Cronometer Parser Fix] Original processCronometerText function not found');
            return;
        }

        // Create a fixed version of the processCronometerText function
        const originalProcessCronometerText = window.processCronometerText;
        
        // Replace the original function with our fixed version
        window.processCronometerText = function(text, ingredientItem, statusElement) {
            console.log('[Cronometer Parser Fix] Using fixed processCronometerText function');
            
            try {
                // Call the original function
                const result = originalProcessCronometerText(text, ingredientItem, statusElement);
                
                // Log success
                console.log('[Cronometer Parser Fix] Successfully processed Cronometer text');
                
                return result;
            } catch (error) {
                console.error('[Cronometer Parser Fix] Error in processCronometerText:', error);
                
                // If the error is related to PATTERNS, use our own implementation
                if (error.message.includes('PATTERNS')) {
                    console.log('[Cronometer Parser Fix] Using fallback implementation');
                    
                    // Use our own implementation that doesn't rely on PATTERNS
                    return processTextFallback(text, ingredientItem, statusElement);
                }
                
                // For other errors, show the error in the status element
                if (statusElement) {
                    statusElement.textContent = `Error: ${error.message}`;
                    statusElement.className = 'cronometer-parse-status error';
                }
                
                throw error;
            }
        };
        
        console.log('[Cronometer Parser Fix] Initialized');
    });
    
    // Fallback implementation of processCronometerText
    function processTextFallback(text, ingredientItem, statusElement) {
        console.log('[Cronometer Parser Fix] Using fallback implementation');
        
        if (!text || !text.trim()) {
            if (statusElement) {
                statusElement.textContent = 'Please paste Cronometer nutrition data';
                statusElement.className = 'cronometer-parse-status error';
            }
            return null;
        }
        
        try {
            // Extract values using our own implementation
            const result = extractNutritionValues(text);
            
            if (!result.success) {
                if (statusElement) {
                    statusElement.textContent = 'Could not parse Cronometer data';
                    statusElement.className = 'cronometer-parse-status error';
                }
                return null;
            }
            
            // Update the ingredient item with the extracted values
            updateIngredientItem(ingredientItem, result);
            
            // Show success message
            if (statusElement) {
                statusElement.textContent = 'Nutrition data parsed successfully!';
                statusElement.className = 'cronometer-parse-status success';
            }
            
            return result;
        } catch (error) {
            console.error('[Cronometer Parser Fix] Error in fallback implementation:', error);
            
            if (statusElement) {
                statusElement.textContent = `Error: ${error.message}`;
                statusElement.className = 'cronometer-parse-status error';
            }
            
            return null;
        }
    }
    
    // Extract nutrition values from Cronometer text
    function extractNutritionValues(text) {
        // Helper function to extract values using regex
        function extractValue(text, pattern) {
            const match = text.match(pattern);
            return match ? parseFloat(match[1]) : null;
        }
        
        // Use the patterns from window.CRONOMETER_PATTERNS if available
        const patterns = window.CRONOMETER_PATTERNS || {
            // Basic patterns for essential nutrients
            ENERGY: /Energy:\s+(\d+(?:\.\d+)?)\s+kcal/i,
            PROTEIN: /Protein:\s+(\d+(?:\.\d+)?)\s+g/i,
            FAT: /Fat:\s+(\d+(?:\.\d+)?)\s+g/i,
            CARBS: /Carbs:\s+(\d+(?:\.\d+)?)\s+g/i
        };
        
        // Initialize result object with essential nutrients
        const result = {
            success: true,
            calories: extractValue(text, patterns.ENERGY),
            protein: extractValue(text, patterns.PROTEIN),
            fats: extractValue(text, patterns.FAT),
            carbohydrates: extractValue(text, patterns.CARBS)
        };
        
        // Check if essential nutrients were extracted
        if (!result.calories || !result.protein || !result.fats || !result.carbohydrates) {
            console.error('[Cronometer Parser Fix] Failed to extract essential nutrients');
            result.success = false;
        }
        
        return result;
    }
    
    // Update the ingredient item with the extracted values
    function updateIngredientItem(ingredientItem, result) {
        if (!ingredientItem) return;
        
        // Store the complete nutrition data in a data attribute
        ingredientItem.dataset.completeNutritionData = JSON.stringify(result);
        
        // Update visible form fields
        const prefix = ingredientItem.id === 'add-ingredient-form' ? 'add' : 'edit';
        
        // Update calories
        const caloriesInput = document.getElementById(`${prefix}-ingredient-calories`);
        if (caloriesInput && result.calories !== null) {
            caloriesInput.value = result.calories;
        }
        
        // Update protein
        const proteinInput = document.getElementById(`${prefix}-ingredient-protein`);
        if (proteinInput && result.protein !== null) {
            proteinInput.value = result.protein;
        }
        
        // Update fats
        const fatsInput = document.getElementById(`${prefix}-ingredient-fats`);
        if (fatsInput && result.fats !== null) {
            fatsInput.value = result.fats;
        }
        
        // Update carbs
        const carbsInput = document.getElementById(`${prefix}-ingredient-carbs`);
        if (carbsInput && result.carbohydrates !== null) {
            carbsInput.value = result.carbohydrates;
        }
        
        // Update hidden fields for form submission
        const caloriesHidden = ingredientItem.querySelector('.ingredient-calories');
        if (caloriesHidden && result.calories !== null) {
            caloriesHidden.value = result.calories;
        }
        
        const proteinHidden = ingredientItem.querySelector('.ingredient-protein');
        if (proteinHidden && result.protein !== null) {
            proteinHidden.value = result.protein;
        }
        
        const fatHidden = ingredientItem.querySelector('.ingredient-fat');
        if (fatHidden && result.fats !== null) {
            fatHidden.value = result.fats;
        }
        
        const carbsHidden = ingredientItem.querySelector('.ingredient-carbs');
        if (carbsHidden && result.carbohydrates !== null) {
            carbsHidden.value = result.carbohydrates;
        }
    }
})();
