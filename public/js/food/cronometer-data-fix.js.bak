/**
 * Cronometer Data Fix
 *
 * This script fixes the issue with Cronometer parser data not being saved to the database.
 * It ensures that all micronutrient data from the Cronometer parser is properly included
 * in the ingredient data sent to the backend.
 */

(function() {
    // Wait for the DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the Cronometer data fix
        initCronometerDataFix();
    });

    /**
     * Initialize the Cronometer data fix
     */
    function initCronometerDataFix() {
        console.log('[Cronometer Data Fix] Initializing...');

        // Add event listeners to all Cronometer parse buttons
        addEventListenersToCronometerParseButtons();

        // Add a mutation observer to add event listeners to new Cronometer parse buttons
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    // Check if any of the added nodes contain Cronometer parse buttons
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            // Check if the node contains Cronometer parse buttons
                            const parseButtons = node.querySelectorAll('.cronometer-parse-button');
                            if (parseButtons.length > 0) {
                                // Add event listeners to the parse buttons
                                parseButtons.forEach(function(button) {
                                    addEventListenerToCronometerParseButton(button);
                                });
                            }
                        }
                    });
                }
            });
        });

        // Start observing the document
        observer.observe(document.body, { childList: true, subtree: true });

        // Add event listener to the form submission
        const createRecipeForm = document.getElementById('create-recipe-form');
        if (createRecipeForm) {
            // Add our event listener that runs before form submission
            createRecipeForm.addEventListener('submit', handleFormSubmit, true);
            console.log('[Cronometer Data Fix] Successfully added form submission handler');
        } else {
            console.warn('[Cronometer Data Fix] Create recipe form not found');
        }
    }

    /**
     * Add event listeners to all Cronometer parse buttons
     */
    function addEventListenersToCronometerParseButtons() {
        // Get all Cronometer parse buttons
        const parseButtons = document.querySelectorAll('.cronometer-parse-button');

        // Add event listeners to each button
        parseButtons.forEach(function(button) {
            addEventListenerToCronometerParseButton(button);
        });
    }

    /**
     * Add event listener to a Cronometer parse button
     * @param {HTMLElement} button - The parse button
     */
    function addEventListenerToCronometerParseButton(button) {
        // Check if the button already has our event listener
        if (button.dataset.micronutrientFixAdded) {
            return;
        }

        // Mark the button as having our event listener
        button.dataset.micronutrientFixAdded = 'true';

        // Add a click event listener that runs after the original click handler
        button.addEventListener('click', function() {
            // Wait a short time for the original handler to complete
            setTimeout(function() {
                // Get the ingredient item
                const ingredientItem = button.closest('.ingredient-item');
                if (ingredientItem) {
                    // Ensure micronutrient data is saved
                    ensureMicronutrientDataIsSaved(ingredientItem);
                }
            }, 500);
        });

        console.log('[Cronometer Data Fix] Added event listener to Cronometer parse button:', button);
    }

    /**
     * Handle form submission
     * @param {Event} event - The submit event
     */
    function handleFormSubmit(event) {
        // Don't prevent default here, as we want the original handler to run
        console.log('[Cronometer Data Fix] Form submitted');

        // Get all ingredient items
        const ingredientItems = document.querySelectorAll('.ingredient-item');

        // Ensure micronutrient data is saved for each ingredient
        ingredientItems.forEach(ingredientItem => {
            ensureMicronutrientDataIsSaved(ingredientItem);
        });
    }

    /**
     * Ensure micronutrient data is saved
     * @param {HTMLElement} ingredientItem - The ingredient item element
     */
    function ensureMicronutrientDataIsSaved(ingredientItem) {
        console.log('[Cronometer Data Fix] Ensuring micronutrient data is saved for ingredient:', ingredientItem);

        try {
            // Check if the ingredient item has complete nutrition data
            if (ingredientItem.dataset.completeNutritionData) {
                console.log('[Cronometer Data Fix] Found complete nutrition data');

                // Parse the complete nutrition data
                const nutritionData = JSON.parse(ingredientItem.dataset.completeNutritionData);

                // Get the database format data
                let dbFormatData = {};
                if (ingredientItem.dataset.dbFormatNutritionData) {
                    dbFormatData = JSON.parse(ingredientItem.dataset.dbFormatNutritionData);
                } else if (window.NutritionFieldMapper) {
                    dbFormatData = window.NutritionFieldMapper.toDbFormat(nutritionData);
                    // Store the DB format data for later use
                    ingredientItem.dataset.dbFormatNutritionData = JSON.stringify(dbFormatData);
                }

                console.log('[Cronometer Data Fix] Database format data:', dbFormatData);

                // Update the hidden fields with the micronutrient data
                updateHiddenFields(ingredientItem, dbFormatData);

                // Also update the visible fields in the detailed nutrition panel
                updateDetailedNutritionFields(ingredientItem, nutritionData);
            } else {
                console.log('[Cronometer Data Fix] No complete nutrition data found');
            }
        } catch (error) {
            console.error('[Cronometer Data Fix] Error ensuring micronutrient data is saved:', error);
        }
    }

    /**
     * Update hidden fields with micronutrient data
     * @param {HTMLElement} ingredientItem - The ingredient item element
     * @param {Object} dbFormatData - The database format data
     */
    function updateHiddenFields(ingredientItem, dbFormatData) {
        console.log('[Cronometer Data Fix] Updating hidden fields');

        // Create hidden fields for all micronutrient data
        for (const [key, value] of Object.entries(dbFormatData)) {
            // Skip null or undefined values
            if (value === null || value === undefined) continue;

            // Skip basic fields that are already handled
            if (['name', 'calories', 'amount', 'protein', 'fats', 'carbohydrates', 'price', 'package_amount'].includes(key)) {
                continue;
            }

            // Create or update the hidden field
            let hiddenField = ingredientItem.querySelector(`.ingredient-${key}`);
            if (!hiddenField) {
                hiddenField = document.createElement('input');
                hiddenField.type = 'hidden';
                hiddenField.name = `ingredient-${key}`; // Add name attribute for form submission
                hiddenField.className = `ingredient-${key}`;
                ingredientItem.appendChild(hiddenField);
            } else if (!hiddenField.name) {
                // Ensure existing fields have a name attribute
                hiddenField.name = `ingredient-${key}`;
            }

            // Set the value
            hiddenField.value = value;

            console.log(`[Cronometer Data Fix] Updated hidden field: ${key} = ${value}`);
        }
    }

    /**
     * Update detailed nutrition fields
     * @param {HTMLElement} ingredientItem - The ingredient item element
     * @param {Object} nutritionData - The nutrition data
     */
    function updateDetailedNutritionFields(ingredientItem, nutritionData) {
        console.log('[Cronometer Data Fix] Updating detailed nutrition fields');

        // Get the detailed nutrition panel
        const detailedNutritionPanel = ingredientItem.querySelector('.detailed-nutrition-panel');
        if (!detailedNutritionPanel) {
            console.log('[Cronometer Data Fix] No detailed nutrition panel found');
            return;
        }

        // Update the fields
        for (const [key, value] of Object.entries(nutritionData)) {
            // Skip null or undefined values
            if (value === null || value === undefined) continue;

            // Skip success flag
            if (key === 'success') continue;

            // Convert key to input ID format
            const inputId = `nutrition-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`;

            // Find the input field
            const inputField = detailedNutritionPanel.querySelector(`.${inputId}`);
            if (inputField) {
                // Set the value
                inputField.value = value;
                console.log(`[Cronometer Data Fix] Updated detailed nutrition field: ${inputId} = ${value}`);
            }
        }
    }
})();
