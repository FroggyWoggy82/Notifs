/**
 * Nutrition Save Debug
 * 
 * This script adds debugging for the Save Nutrition button functionality.
 */

(function() {
    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log('[Nutrition Save Debug] Initializing...');
        
        // Add a global event listener for all save nutrition buttons
        document.addEventListener('click', function(event) {
            if (event.target && event.target.classList.contains('save-nutrition')) {
                console.log('[Nutrition Save Debug] Save Nutrition button clicked');
                
                // Find the detailed nutrition panel
                const panel = event.target.closest('.detailed-nutrition-panel');
                if (!panel) {
                    console.error('[Nutrition Save Debug] Could not find detailed nutrition panel');
                    return;
                }
                
                // Find the ingredient item container
                const ingredientItem = panel.closest('.ingredient-item');
                if (!ingredientItem) {
                    console.error('[Nutrition Save Debug] Could not find ingredient item container');
                    return;
                }
                
                // Log all input fields in the panel
                console.log('[Nutrition Save Debug] Input fields in panel:');
                panel.querySelectorAll('input').forEach(input => {
                    console.log(`[Nutrition Save Debug] Input field: ${input.className} = ${input.value}`);
                });
                
                // Check if NutritionFieldMapper is available
                if (!window.NutritionFieldMapper) {
                    console.error('[Nutrition Save Debug] NutritionFieldMapper not available');
                } else {
                    console.log('[Nutrition Save Debug] NutritionFieldMapper is available');
                }
                
                // Check if the ingredient item has the dbFormatNutritionData dataset property
                setTimeout(() => {
                    if (ingredientItem.dataset.dbFormatNutritionData) {
                        console.log('[Nutrition Save Debug] dbFormatNutritionData dataset property is set:', ingredientItem.dataset.dbFormatNutritionData);
                    } else {
                        console.error('[Nutrition Save Debug] dbFormatNutritionData dataset property is not set');
                    }
                    
                    // Check for hidden fields
                    const hiddenFields = ingredientItem.querySelectorAll('input[type="hidden"]');
                    console.log(`[Nutrition Save Debug] Found ${hiddenFields.length} hidden fields:`);
                    hiddenFields.forEach(field => {
                        console.log(`[Nutrition Save Debug] Hidden field: ${field.className} = ${field.value}`);
                    });
                }, 500);
            }
        });
        
        // Add a global event listener for form submissions
        document.addEventListener('submit', function(event) {
            if (event.target && event.target.id === 'create-recipe-form') {
                console.log('[Nutrition Save Debug] Recipe form submitted');
                
                // Find all ingredient items
                const ingredientItems = event.target.querySelectorAll('.ingredient-item');
                console.log(`[Nutrition Save Debug] Found ${ingredientItems.length} ingredient items`);
                
                // Check each ingredient item for micronutrient data
                ingredientItems.forEach((item, index) => {
                    console.log(`[Nutrition Save Debug] Checking ingredient item ${index + 1}`);
                    
                    // Check if the ingredient item has the dbFormatNutritionData dataset property
                    if (item.dataset.dbFormatNutritionData) {
                        console.log(`[Nutrition Save Debug] Ingredient item ${index + 1} has dbFormatNutritionData:`, item.dataset.dbFormatNutritionData);
                    } else {
                        console.warn(`[Nutrition Save Debug] Ingredient item ${index + 1} does not have dbFormatNutritionData`);
                    }
                    
                    // Check for hidden fields
                    const hiddenFields = item.querySelectorAll('input[type="hidden"]');
                    console.log(`[Nutrition Save Debug] Ingredient item ${index + 1} has ${hiddenFields.length} hidden fields`);
                });
            }
        });
        
        console.log('[Nutrition Save Debug] Initialized');
    });
})();
